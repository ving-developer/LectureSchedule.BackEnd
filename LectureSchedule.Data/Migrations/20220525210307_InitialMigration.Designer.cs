// <auto-generated />
using System;
using LectureSchedule.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LectureSchedule.Data.Migrations
{
    [DbContext(typeof(LectureScheduleContext))]
    [Migration("20220525210307_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("LectureSchedule.Domain.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Local")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxPeopleSupported")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("LectureSchedule.Domain.PublicityCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LectureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.ToTable("PublicityCampaigns");
                });

            modelBuilder.Entity("LectureSchedule.Domain.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("LectureSchedule.Domain.SpeakerLecture", b =>
                {
                    b.Property<int>("LectureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LectureId", "SpeakerId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SpeakerLectures");
                });

            modelBuilder.Entity("LectureSchedule.Domain.TicketLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LectureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.ToTable("TicketLots");
                });

            modelBuilder.Entity("LectureSchedule.Domain.PublicityCampaign", b =>
                {
                    b.HasOne("LectureSchedule.Domain.Lecture", "Lecture")
                        .WithMany("PublicityCampaigns")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("LectureSchedule.Domain.SpeakerLecture", b =>
                {
                    b.HasOne("LectureSchedule.Domain.Lecture", "Lecture")
                        .WithMany("SpeakerLectures")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LectureSchedule.Domain.Speaker", "Speaker")
                        .WithMany("SpeakerLectures")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("LectureSchedule.Domain.TicketLot", b =>
                {
                    b.HasOne("LectureSchedule.Domain.Lecture", "Lecture")
                        .WithMany("TicketLots")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("LectureSchedule.Domain.Lecture", b =>
                {
                    b.Navigation("PublicityCampaigns");

                    b.Navigation("SpeakerLectures");

                    b.Navigation("TicketLots");
                });

            modelBuilder.Entity("LectureSchedule.Domain.Speaker", b =>
                {
                    b.Navigation("SpeakerLectures");
                });
#pragma warning restore 612, 618
        }
    }
}
